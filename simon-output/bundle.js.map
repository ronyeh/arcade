{
  "version": 3,
  "sources": ["../simon-src/src/Square.ts", "../simon-src/src/AudioManager.ts", "../simon-src/src/BonusManager.ts", "../simon-src/src/Game.ts", "../simon-src/src/main.ts"],
  "sourcesContent": ["import { SquareConfig } from './types';\n\n// Access PIXI from global scope (loaded via CDN)\ndeclare const PIXI: any;\n\nexport class Square {\n    public container: any;\n    public graphics: any;\n    public isActive: boolean = false;\n    public isHidden: boolean = false;\n    private config: SquareConfig;\n    private flashTween: any = null;\n\n    constructor(config: SquareConfig, size: number) {\n        this.config = config;\n        this.container = new PIXI.Container();\n        this.graphics = new PIXI.Graphics();\n        \n        this.container.addChild(this.graphics);\n        this.container.x = config.x;\n        this.container.y = config.y;\n        \n        // Make it interactive\n        this.container.interactive = true;\n        this.container.buttonMode = true;\n        \n        this.drawSquare(size);\n    }\n\n    private drawSquare(size: number): void {\n        this.graphics.clear();\n        \n        if (this.isHidden) {\n            // Draw a semi-transparent overlay when hidden\n            this.graphics.beginFill(0x000000, 0.7);\n            this.graphics.drawRoundedRect(-size/2, -size/2, size, size, 10);\n            this.graphics.endFill();\n        } else {\n            // Draw the colored square\n            const color = this.isActive ? this.config.color : this.config.darkColor;\n            this.graphics.beginFill(color);\n            this.graphics.drawRoundedRect(-size/2, -size/2, size, size, 10);\n            this.graphics.endFill();\n            \n            // Add border\n            this.graphics.lineStyle(3, 0xFFFFFF, 0.8);\n            this.graphics.drawRoundedRect(-size/2, -size/2, size, size, 10);\n        }\n    }\n\n    public flash(duration: number = 500): Promise<void> {\n        return new Promise((resolve) => {\n            this.isActive = true;\n            this.drawSquare(150); // Assuming size is 150, you might want to pass this\n            \n            // Simple timeout-based flash\n            setTimeout(() => {\n                this.isActive = false;\n                this.drawSquare(150);\n                resolve();\n            }, duration);\n        });\n    }\n\n    public setHidden(hidden: boolean): void {\n        this.isHidden = hidden;\n        this.drawSquare(150);\n    }\n\n    public onClick(callback: () => void): void {\n        this.container.on('pointerdown', callback);\n    }\n\n    public setSize(size: number): void {\n        this.drawSquare(size);\n    }\n\n    public get key(): string {\n        return this.config.key;\n    }\n\n    public get frequency(): number {\n        return this.config.frequency;\n    }\n}\n", "// Access Tone from global scope (loaded via CDN)\ndeclare const Tone: any;\n\nexport class AudioManager {\n    private synth: any;\n    private isInitialized: boolean = false;\n\n    constructor() {\n        this.synth = new Tone.Synth().toDestination();\n    }\n\n    public async initialize(): Promise<void> {\n        if (!this.isInitialized) {\n            await Tone.start();\n            this.isInitialized = true;\n        }\n    }\n\n    public playTone(frequency: number, duration: number = 0.3): void {\n        if (!this.isInitialized) {\n            console.warn('AudioManager not initialized');\n            return;\n        }\n\n        try {\n            this.synth.triggerAttackRelease(frequency, duration);\n        } catch (error) {\n            console.error('Error playing tone:', error);\n        }\n    }\n\n    public playSequenceTone(frequency: number): void {\n        this.playTone(frequency, 0.5);\n    }\n\n    public playSuccessTone(): void {\n        // Play a pleasant success chord\n        const frequencies = [523.25, 659.25, 783.99]; // C5, E5, G5\n        frequencies.forEach((freq, index) => {\n            setTimeout(() => {\n                this.playTone(freq, 0.2);\n            }, index * 100);\n        });\n    }\n\n    public playFailTone(): void {\n        // Play a descending failure tone\n        const frequencies = [220, 196, 174.61]; // A3, G3, F3\n        frequencies.forEach((freq, index) => {\n            setTimeout(() => {\n                this.playTone(freq, 0.3);\n            }, index * 150);\n        });\n    }\n\n    public playBonusTone(): void {\n        // Play an ascending bonus tone\n        const frequencies = [261.63, 329.63, 392, 523.25]; // C4, E4, G4, C5\n        frequencies.forEach((freq, index) => {\n            setTimeout(() => {\n                this.playTone(freq, 0.15);\n            }, index * 100);\n        });\n    }\n}\n", "import { BonusState, BonusType } from './types';\n\nexport class BonusManager {\n    private bonusState: BonusState;\n    private onBonusActivated: (type: BonusType) => void;\n\n    constructor(onBonusActivated: (type: BonusType) => void) {\n        this.bonusState = {\n            isActive: false,\n            type: null,\n            hintsRemaining: 0,\n            fiftyFiftyActive: false,\n            hiddenSquares: []\n        };\n        this.onBonusActivated = onBonusActivated;\n    }\n\n    public shouldShowBonus(round: number): boolean {\n        return round > 0 && round % 5 === 0;\n    }\n\n    public activateBonus(type: BonusType): void {\n        this.bonusState.type = type;\n        this.bonusState.isActive = true;\n\n        switch (type) {\n            case BonusType.EXTRA_LIFE:\n                // Extra life will be handled by the game\n                break;\n            case BonusType.HINT:\n                this.bonusState.hintsRemaining = 3;\n                break;\n            case BonusType.FIFTY_FIFTY:\n                this.bonusState.fiftyFiftyActive = true;\n                break;\n        }\n\n        this.onBonusActivated(type);\n    }\n\n    public useHint(): boolean {\n        if (this.bonusState.hintsRemaining > 0) {\n            this.bonusState.hintsRemaining--;\n            return true;\n        }\n        return false;\n    }\n\n    public activateFiftyFifty(correctSquare: number): number[] {\n        if (!this.bonusState.fiftyFiftyActive) {\n            return [];\n        }\n\n        // Hide 2 random squares that are not the correct one\n        const allSquares = [0, 1, 2, 3];\n        const incorrectSquares = allSquares.filter(i => i !== correctSquare);\n        \n        // Shuffle and take 2\n        for (let i = incorrectSquares.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [incorrectSquares[i], incorrectSquares[j]] = [incorrectSquares[j], incorrectSquares[i]];\n        }\n        \n        this.bonusState.hiddenSquares = incorrectSquares.slice(0, 2);\n        this.bonusState.fiftyFiftyActive = false; // One time use\n        \n        return this.bonusState.hiddenSquares;\n    }\n\n    public clearHiddenSquares(): void {\n        this.bonusState.hiddenSquares = [];\n    }\n\n    public reset(): void {\n        this.bonusState = {\n            isActive: false,\n            type: null,\n            hintsRemaining: 0,\n            fiftyFiftyActive: false,\n            hiddenSquares: []\n        };\n    }\n\n    public get state(): BonusState {\n        return { ...this.bonusState };\n    }\n\n    public get hasHints(): boolean {\n        return this.bonusState.hintsRemaining > 0;\n    }\n\n    public get canUseFiftyFifty(): boolean {\n        return this.bonusState.fiftyFiftyActive;\n    }\n}\n", "import { GameState, SquareConfig, BonusType } from './types';\nimport { Square } from './Square';\nimport { AudioManager } from './AudioManager';\nimport { BonusManager } from './BonusManager';\n\n// Use any type for CDN-loaded PIXI\ndeclare const PIXI: any;\n\nexport class Game {\n    private app: any;\n    private squares: Square[] = [];\n    private gameState: GameState;\n    private audioManager: AudioManager;\n    private bonusManager: BonusManager;\n    \n    private squareConfigs: SquareConfig[] = [\n        { x: 150, y: 150, color: 0xFF4444, darkColor: 0x881111, key: 'f', frequency: 261.63 }, // C4 - Red (top-left)\n        { x: 150, y: 350, color: 0x44FF44, darkColor: 0x118811, key: 'd', frequency: 329.63 }, // E4 - Green (bottom-left)\n        { x: 350, y: 150, color: 0x4444FF, darkColor: 0x111188, key: 'j', frequency: 392.00 }, // G4 - Blue (top-right)\n        { x: 350, y: 350, color: 0xFFFF44, darkColor: 0x888811, key: 'k', frequency: 523.25 }  // C5 - Yellow (bottom-right)\n    ];\n\n    constructor() {\n        this.gameState = {\n            sequence: [],\n            playerSequence: [],\n            round: 0,\n            score: 0,\n            lives: 3,\n            isPlaying: false,\n            isShowingSequence: false,\n            currentSequenceIndex: 0,\n            gameStarted: false,\n            gameOver: false\n        };\n\n        this.audioManager = new AudioManager();\n        this.bonusManager = new BonusManager((type: BonusType) => this.handleBonusActivation(type));\n\n        this.setupEventListeners();\n    }\n\n    public async initializeGame(): Promise<void> {\n        try {\n            // Create PIXI Application\n            this.app = new PIXI.Application({\n                width: 500,\n                height: 500,\n                backgroundColor: 0x1a1a2e,\n                antialias: true\n            });\n\n            // Wait for PIXI to be ready\n            await this.app.init?.() || Promise.resolve();\n\n            // Mount the PIXI app to the canvas\n            const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n            if (canvas && canvas.parentNode) {\n                canvas.parentNode.replaceChild(this.app.view as HTMLCanvasElement, canvas);\n            }\n\n            // Initialize audio\n            await this.audioManager.initialize();\n\n            // Create squares\n            this.createSquares();\n            \n            this.updateUI();\n        } catch (error) {\n            console.error('Failed to initialize game:', error);\n            throw error;\n        }\n    }\n\n    private createSquares(): void {\n        this.squareConfigs.forEach((config, index) => {\n            const square = new Square(config, 150);\n            square.onClick(() => this.handleSquareClick(index));\n            this.squares.push(square);\n            this.app.stage.addChild(square.container);\n        });\n    }\n\n    private setupEventListeners(): void {\n        // Keyboard controls\n        document.addEventListener('keydown', (event) => {\n            const key = event.key.toLowerCase();\n            const squareIndex = this.squareConfigs.findIndex(config => config.key === key);\n            \n            if (squareIndex !== -1 && this.gameState.isPlaying && !this.gameState.isShowingSequence) {\n                this.handleSquareClick(squareIndex);\n            }\n        });\n\n        // UI button listeners\n        document.getElementById('start-btn')?.addEventListener('click', () => this.startGame());\n        document.getElementById('restart-btn')?.addEventListener('click', () => this.restartGame());\n        \n        // Bonus button listeners\n        document.getElementById('bonus-life')?.addEventListener('click', () => this.selectBonus(BonusType.EXTRA_LIFE));\n        document.getElementById('bonus-hint')?.addEventListener('click', () => this.selectBonus(BonusType.HINT));\n        document.getElementById('bonus-fifty')?.addEventListener('click', () => this.selectBonus(BonusType.FIFTY_FIFTY));\n    }\n\n    private handleSquareClick(index: number): void {\n        if (!this.gameState.isPlaying || this.gameState.isShowingSequence) {\n            return;\n        }\n\n        // Check if square is hidden by 50/50 bonus\n        if (this.bonusManager.state.hiddenSquares.includes(index)) {\n            return;\n        }\n\n        const square = this.squares[index];\n        \n        // Visual and audio feedback\n        square.flash(200);\n        this.audioManager.playTone(square.frequency, 0.2);\n\n        // Add to player sequence\n        this.gameState.playerSequence.push(index);\n\n        // Check if current input is correct\n        const currentIndex = this.gameState.playerSequence.length - 1;\n        const expectedSquare = this.gameState.sequence[currentIndex];\n\n        if (index !== expectedSquare) {\n            this.handleIncorrectInput();\n            return;\n        }\n\n        // Check if sequence is complete\n        if (this.gameState.playerSequence.length === this.gameState.sequence.length) {\n            this.handleSequenceComplete();\n        }\n    }\n\n    private handleIncorrectInput(): void {\n        this.audioManager.playFailTone();\n        this.gameState.lives--;\n        \n        if (this.gameState.lives <= 0) {\n            this.endGame();\n        } else {\n            // Reset for retry\n            this.gameState.playerSequence = [];\n            setTimeout(() => {\n                this.showSequence();\n            }, 1000);\n        }\n        \n        this.updateUI();\n    }\n\n    private handleSequenceComplete(): void {\n        this.audioManager.playSuccessTone();\n        this.gameState.score += this.gameState.round * 10;\n        this.gameState.round++;\n        \n        // Clear any 50/50 hidden squares\n        this.bonusManager.clearHiddenSquares();\n        this.squares.forEach(square => square.setHidden(false));\n        \n        // Check for bonus round\n        if (this.bonusManager.shouldShowBonus(this.gameState.round)) {\n            this.showBonusPanel();\n        } else {\n            this.nextRound();\n        }\n        \n        this.updateUI();\n    }\n\n    private nextRound(): void {\n        // Add new random square to sequence\n        const newSquare = Math.floor(Math.random() * 4);\n        this.gameState.sequence.push(newSquare);\n        this.gameState.playerSequence = [];\n        \n        setTimeout(() => {\n            this.showSequence();\n        }, 1000);\n    }\n\n    private async showSequence(): Promise<void> {\n        this.gameState.isShowingSequence = true;\n        \n        for (let i = 0; i < this.gameState.sequence.length; i++) {\n            await new Promise(resolve => setTimeout(resolve, 600));\n            \n            const squareIndex = this.gameState.sequence[i];\n            const square = this.squares[squareIndex];\n            \n            // Flash square and play tone\n            square.flash(500);\n            this.audioManager.playSequenceTone(square.frequency);\n        }\n        \n        // Wait a bit before allowing input\n        setTimeout(() => {\n            this.gameState.isShowingSequence = false;\n        }, 1000);\n    }\n\n    private showBonusPanel(): void {\n        document.getElementById('bonus-panel')?.classList.remove('hidden');\n        this.audioManager.playBonusTone();\n    }\n\n    private selectBonus(type: BonusType): void {\n        this.bonusManager.activateBonus(type);\n        document.getElementById('bonus-panel')?.classList.add('hidden');\n        this.nextRound();\n    }\n\n    private handleBonusActivation(type: BonusType): void {\n        switch (type) {\n            case BonusType.EXTRA_LIFE:\n                this.gameState.lives++;\n                break;\n            case BonusType.HINT:\n                // Hint functionality will be available during gameplay\n                break;\n            case BonusType.FIFTY_FIFTY:\n                // 50/50 will be activated when needed\n                break;\n        }\n        this.updateUI();\n    }\n\n    public useHint(): void {\n        if (this.bonusManager.hasHints && this.gameState.playerSequence.length < this.gameState.sequence.length) {\n            const nextSquareIndex = this.gameState.sequence[this.gameState.playerSequence.length];\n            const square = this.squares[nextSquareIndex];\n            \n            if (this.bonusManager.useHint()) {\n                // Play tone without visual flash\n                this.audioManager.playTone(square.frequency, 0.5);\n            }\n        }\n    }\n\n    public useFiftyFifty(): void {\n        if (this.bonusManager.canUseFiftyFifty && this.gameState.playerSequence.length < this.gameState.sequence.length) {\n            const nextSquareIndex = this.gameState.sequence[this.gameState.playerSequence.length];\n            const hiddenSquares = this.bonusManager.activateFiftyFifty(nextSquareIndex);\n            \n            // Hide the incorrect squares\n            hiddenSquares.forEach(index => {\n                this.squares[index].setHidden(true);\n            });\n        }\n    }\n\n    private startGame(): void {\n        this.gameState.gameStarted = true;\n        this.gameState.isPlaying = true;\n        this.gameState.sequence = [];\n        \n        document.getElementById('instructions')?.classList.add('hidden');\n        \n        this.nextRound();\n    }\n\n    private restartGame(): void {\n        // Reset game state\n        this.gameState = {\n            sequence: [],\n            playerSequence: [],\n            round: 0,\n            score: 0,\n            lives: 3,\n            isPlaying: false,\n            isShowingSequence: false,\n            currentSequenceIndex: 0,\n            gameStarted: false,\n            gameOver: false\n        };\n        \n        this.bonusManager.reset();\n        \n        // Reset UI\n        document.getElementById('game-over')?.classList.add('hidden');\n        document.getElementById('instructions')?.classList.remove('hidden');\n        document.getElementById('bonus-panel')?.classList.add('hidden');\n        \n        // Reset squares\n        this.squares.forEach(square => square.setHidden(false));\n        \n        this.updateUI();\n    }\n\n    private endGame(): void {\n        this.gameState.gameOver = true;\n        this.gameState.isPlaying = false;\n        \n        // Show game over screen\n        document.getElementById('game-over')?.classList.remove('hidden');\n        const finalScore = document.getElementById('final-score');\n        const finalRound = document.getElementById('final-round');\n        \n        if (finalScore) finalScore.textContent = this.gameState.score.toString();\n        if (finalRound) finalRound.textContent = this.gameState.round.toString();\n    }\n\n    private updateUI(): void {\n        const roundElement = document.getElementById('round');\n        const livesElement = document.getElementById('lives');\n        const scoreElement = document.getElementById('score');\n        \n        if (roundElement) roundElement.textContent = this.gameState.round.toString();\n        if (livesElement) livesElement.textContent = this.gameState.lives.toString();\n        if (scoreElement) scoreElement.textContent = this.gameState.score.toString();\n    }\n\n    public getApp(): any {\n        return this.app;\n    }\n}\n", "import { Game } from './Game';\n\n// Wait for DOM to be loaded\ndocument.addEventListener('DOMContentLoaded', async () => {\n    try {\n        const game = new Game();\n        \n        // Initialize the game asynchronously\n        await game.initializeGame();\n        \n        // Make game globally accessible for debugging\n        (window as any).game = game;\n        \n        console.log('Simon Says game initialized!');\n        \n        // Add hint and 50/50 keyboard shortcuts\n        document.addEventListener('keydown', (event) => {\n            if (event.key === 'h' || event.key === 'H') {\n                game.useHint();\n            }\n            if (event.key === 'x' || event.key === 'X') {\n                game.useFiftyFifty();\n            }\n        });\n        \n    } catch (error) {\n        console.error('Failed to initialize game:', error);\n        \n        // Show error message to user\n        const gameContainer = document.getElementById('game-container');\n        if (gameContainer) {\n            gameContainer.innerHTML = `\n                <div style=\"text-align: center; padding: 50px;\">\n                    <h2>Error Loading Game</h2>\n                    <p>There was an error initializing the Simon Says game.</p>\n                    <p>Please refresh the page and try again.</p>\n                    <button onclick=\"location.reload()\" style=\"\n                        background: #4ecdc4; \n                        border: none; \n                        color: white; \n                        padding: 15px 30px; \n                        border-radius: 25px; \n                        font-size: 1.1rem; \n                        cursor: pointer;\n                    \">Refresh Page</button>\n                </div>\n            `;\n        }\n    }\n});\n\n// Handle page visibility for audio context\ndocument.addEventListener('visibilitychange', () => {\n    if (!document.hidden) {\n        // Resume audio context when page becomes visible\n        // This helps with browser audio policies\n        if ((window as any).Tone && (window as any).Tone.context.state === 'suspended') {\n            (window as any).Tone.start();\n        }\n    }\n});\n"],
  "mappings": "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",
  "names": []
}
